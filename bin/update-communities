#!/usr/bin/env node
/*
 Update the community logos in src/img/communities/ (orig and gray)
 If the logo file exists in orig, it will not be overwritten
 To execute: 
 npm install -g node-inspector
 node-debug bin/update-communities
*/

'use strict';

// maximum height of the logo, in pixels
var LOGO_MAX_HEIGHT = 120

var DOCUMENT_KEY = '1d1LrdMkr93RTInpsSbeCVO7q6JXJ1vES4LJ1YYjQ64U';
var NAME_COL = '1';
var LOGO_COL = '15';
var URL_COL = '16';


var GoogleSpreadsheets = require("google-spreadsheets")
, http = require('http')
, fs = require('fs')
, _ = require("lodash")
, Promise = require('promise')
, downloader = require('./image-downloader')
, getExtension = function(url) {
  var parts = /\.[^.:\/]+$/.exec(url.replace(/\?.*/, ''))
  return parts || ''
}
, getValue = function(o) { 
  return o && o.value || ''
}

// crea el fichero con los estilos CSS 
, createScss = function(communities) {
  var content = '// File generated by bin/update-communities\n' +
    '@import "_sprite";\n\n' +
    _.map(communities, function(community) {
      return community.logo? '.' + community.className + ' { @include sprite($' + community.className + '); }' : ''
    }).join('\n')

    console.log("Writing CSS selectors at _sass/partials/_communities.scss")
    fs.writeFile('_sass/partials/_communities.scss', content)
  
}

// crea el fichero de footer con los enlaces
, createFooter = function(communities) {
  var content = '<!-- File generated by bin/update-communities -->\n' +
    _.map(communities, _.template('<a href="{{url}}" class="community {{className}}" title="{{name}}">{{name}}</a> ')).join('\n');

    console.log("Writing the community links at _includes/communities_logos.html")
    fs.writeFile('_includes/communities_logos.html', content)
}

_.templateSettings.interpolate = /{{([\s\S]+?)}}/g;

GoogleSpreadsheets({
    key: DOCUMENT_KEY
}, function(err, spreadsheet) {

    spreadsheet.worksheets[0].cells({
        range: "R3C1:R500C20"
    }, function(err, cells) {
      
      // transformar la hoja Excel en comunidades
      var communities = _.map(cells.cells, function(row) {
        var communityName = getValue(row[NAME_COL])
        return {
          // replaces all the characters that can give problems in a Scss file
          className: communityName.replace(/[^a-zA-Z0-9_\-]/g, '-'),
          name: communityName,
          url: getValue(row[URL_COL]),
          logo: getValue(row[LOGO_COL]).replace('https://', 'http://')
        }
      })

      // descargar las im√°genes y procesar las que se hayan podido descargar
      var processedCommunities = [];
      var downloads = _.map(communities, function(community) {
        console.log('Processing community ' + community.name);
        return downloader.download({
          file: {
            url: community.logo,
            name: community.name,
          },
          originalFilename: 'img/communities/orig/' + community.className + '{{extension}}',
          processedFilename: 'img/communities/gray/' + community.className + '.png',
          vectorToPng: 'inkscape --export-png="{{processedFilename}}" --export-height=' + LOGO_MAX_HEIGHT + ' "{{originalFilename}}" && convert "{{processedFilename}}" -colorspace Gray "{{processedFilename}}"',
          toPng: 'convert "{{originalFilename}}" -colorspace Gray -geometry x' + LOGO_MAX_HEIGHT + ' "{{processedFilename}}"'
        }).then(function() {
          console.log('Proccessed ' + community.name);
          processedCommunities.push(community);
        }).catch(function(msg, error) {
          console.log(msg, error);
        });
      });

      Promise.all(downloads).then(function() {
        // save the json with the array of communities
        //console.log("Writing list of communities at communities.json")
        //fs.writeFile('js/communities.json', JSON.stringify(processedCommunities))

        // save the file with all the CSS styles
        createScss(processedCommunities);

        // create the footer file with all communities
        createFooter(processedCommunities);
      })
      
    });
});